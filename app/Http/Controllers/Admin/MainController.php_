<?php

namespace App\Http\Controllers\Admin;

use App\Commission;
use App\HistoryGame;
use App\Payment;
use App\Promocode;
use App\User;
use App\WithdrawMoneyAccountApplication;
use Carbon\Carbon;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Pagination\Paginator;

class MainController extends Controller
{

    public $paginate = 12;

    // Метод отвечающий за вывод страницы со статистикой
    public function home() {

        $page = 'Статистика';

        $paymentsInputToday = Payment::where('created_at', '>', Carbon::today())
            ->where('created_at', '<', Carbon::now())
            ->where('payment_type_id', 1)
            ->where('is_admin', 0)
            ->sum('price');

        $paymentsInputYesterday = Payment::where('created_at', '>', Carbon::yesterday())
            ->where('created_at', '<', Carbon::today())
            ->where('payment_type_id', 1)
            ->where('is_admin', 0)->sum('price');

        $paymentsInput7days = Payment::where('created_at', '>', Carbon::today()->subDays(7))
            ->where('created_at', '<', Carbon::now())
            ->where('payment_type_id', 1)->where('is_admin', 0)
            ->sum('price');

        $paymentsInputMonth = Payment::where('created_at', '>', Carbon::today()->subMonth())
            ->where('created_at', '<', Carbon::now())
            ->where('payment_type_id', 1)->where('is_admin', 0)
            ->sum('price');
        $paymentsInput3Months = Payment::where('created_at', '>', Carbon::today()->subMonths(3))->where('created_at', '<', Carbon::now())->where('payment_type_id', 1)->where('is_admin', 0)->sum('price');

        $paymentsOutputToday = Payment::where('created_at', '>', Carbon::today())->where('created_at', '<', Carbon::now())->where('payment_type_id', 2)->where('is_admin', 0)->sum('price');
        $paymentsOutputYesterday = Payment::where('created_at', '>', Carbon::yesterday())->where('created_at', '<', Carbon::today())->where('payment_type_id', 2)->where('is_admin', 0)->sum('price');
        $paymentsOutput7days = Payment::where('created_at', '>', Carbon::today()->subDays(7))->where('created_at', '<', Carbon::now())->where('payment_type_id', 2)->where('is_admin', 0)->sum('price');
        $paymentsOutputMonth = Payment::where('created_at', '>', Carbon::today()->subMonth())->where('created_at', '<', Carbon::now())->where('payment_type_id', 2)->where('is_admin', 0)->sum('price');
        $paymentsOutput3Months = Payment::where('created_at', '>', Carbon::today()->subMonths(3))->where('created_at', '<', Carbon::now())->where('payment_type_id', 2)->where('is_admin', 0)->sum('price');


        $incomeToday = Commission::where('created_at', '>', Carbon::today())->where('created_at', '<', Carbon::now())->sum('price');
        $incomeYesterday = Commission::where('created_at', '>', Carbon::yesterday())->where('created_at', '<', Carbon::today())->sum('price');
        $income7days = Commission::where('created_at', '>', Carbon::today()->subDays(7))->where('created_at', '<', Carbon::now())->sum('price');
        $incomeMonth = Commission::where('created_at', '>', Carbon::today()->subMonth())->where('created_at', '<', Carbon::now())->sum('price');
        $income3Months = Commission::where('created_at', '>', Carbon::today()->subMonths(3))->where('created_at', '<', Carbon::now())->sum('price');

        $newUsersToday = User::where('created_at', '>', Carbon::today())->where('created_at', '<', Carbon::now())->count();
        $newUsersYesterday = User::where('created_at', '>', Carbon::yesterday())->where('created_at', '<', Carbon::today())->count();
        $newUsers7days = User::where('created_at', '>', Carbon::today()->subDays(7))->where('created_at', '<', Carbon::now())->count();
        $newUsersMonth = User::where('created_at', '>', Carbon::today()->subMonth())->where('created_at', '<', Carbon::now())->count();
        $newUsers3Months = User::where('created_at', '>', Carbon::today()->subMonths(3))->where('created_at', '<', Carbon::now())->count();



        $paymentsReferralToday = Payment::where('created_at', '>', Carbon::today())->where('created_at', '<', Carbon::now())->where('payment_type_id', 3)->sum('price');
        $paymentsReferralYesterday = Payment::where('created_at', '>', Carbon::yesterday())->where('created_at', '<', Carbon::today())->where('payment_type_id', 3)->sum('price');
        $paymentsReferral7days = Payment::where('created_at', '>', Carbon::today()->subDays(7))->where('created_at', '<', Carbon::now())->where('payment_type_id', 3)->sum('price');
        $paymentsReferralMonth = Payment::where('created_at', '>', Carbon::today()->subMonth())->where('created_at', '<', Carbon::now())->where('payment_type_id', 3)->sum('price');
        $paymentsReferral3Months = Payment::where('created_at', '>', Carbon::today()->subMonths(3))->where('created_at', '<', Carbon::now())->where('payment_type_id', 3)->sum('price');


        $jackpotStatisticsToday = Commission::where('created_at', '>', Carbon::today())->where('created_at', '<', Carbon::now())->where('game_id', 3)->sum('price');
        $jackpotStatisticsYesterday = Commission::where('created_at', '>', Carbon::yesterday())->where('created_at', '<', Carbon::today())->where('game_id', 3)->sum('price');
        $jackpotStatistics7days = Commission::where('created_at', '>', Carbon::today()->subDays(7))->where('created_at', '<', Carbon::now())->where('game_id', 3)->sum('price');
        $jackpotStatisticsMonth = Commission::where('created_at', '>', Carbon::today()->subMonth())->where('created_at', '<', Carbon::now())->where('game_id', 3)->sum('price');
        $jackpotStatistics3Months = Commission::where('created_at', '>', Carbon::today()->subMonths(3))->where('created_at', '<', Carbon::now())->where('game_id', 3)->sum('price');

        $coinflipStatisticsToday = Commission::where('created_at', '>', Carbon::today())->where('created_at', '<', Carbon::now())->where('game_id', 4)->sum('price');
        $coinflipStatisticsYesterday = Commission::where('created_at', '>', Carbon::yesterday())->where('created_at', '<', Carbon::today())->where('game_id', 4)->sum('price');
        $coinflipStatistics7days = Commission::where('created_at', '>', Carbon::today()->subDays(7))->where('created_at', '<', Carbon::now())->where('game_id', 4)->sum('price');
        $coinflipStatisticsMonth = Commission::where('created_at', '>', Carbon::today()->subMonth())->where('created_at', '<', Carbon::now())->where('game_id', 4)->sum('price');
        $coinflipStatistics3Months = Commission::where('created_at', '>', Carbon::today()->subMonths(3))->where('created_at', '<', Carbon::now())->where('game_id', 4)->sum('price');

        $kingStatisticsToday = Commission::where('created_at', '>', Carbon::today())->where('created_at', '<', Carbon::now())->where('game_id', 2)->sum('price');
        $kingStatisticsYesterday = Commission::where('created_at', '>', Carbon::yesterday())->where('created_at', '<', Carbon::today())->where('game_id', 2)->sum('price');
        $kingStatistics7days = Commission::where('created_at', '>', Carbon::today()->subDays(7))->where('created_at', '<', Carbon::now())->where('game_id', 2)->sum('price');
        $kingStatisticsMonth = Commission::where('created_at', '>', Carbon::today()->subMonth())->where('created_at', '<', Carbon::now())->where('game_id', 2)->sum('price');
        $kingStatistics3Months = Commission::where('created_at', '>', Carbon::today()->subMonths(3))->where('created_at', '<', Carbon::now())->where('game_id', 2)->sum('price');


        return view('admin.home', compact('page', 'paymentsInput3Months', 'paymentsInput7days', 'paymentsInputMonth', 'paymentsInputToday', 'paymentsInputYesterday',
            'paymentsOutput3Months', 'paymentsOutput7days', 'paymentsOutputMonth', 'paymentsOutputToday', 'paymentsOutputYesterday', 'income3Months', 'income7days',
            'incomeMonth', 'incomeYesterday', 'incomeToday', 'newUsers3Months', 'newUsers7days', 'newUsersMonth','newUsersYesterday', 'newUsersToday',
            'paymentsReferralYesterday', 'paymentsReferralToday', 'paymentsReferral7days', 'paymentsReferralMonth', 'paymentsReferral3Months', 'jackpotStatisticsToday',
            'jackpotStatisticsYesterday', 'jackpotStatistics7days', 'jackpotStatisticsMonth', 'jackpotStatistics3Months', 'coinflipStatisticsToday',
            'coinflipStatisticsYesterday', 'coinflipStatistics7days', 'coinflipStatisticsMonth', 'coinflipStatistics3Months', 'kingStatisticsToday',
            'kingStatisticsYesterday', 'kingStatistics7days', 'kingStatisticsMonth', 'kingStatistics3Months'));
    }

    // Выводит список пользователей
    public function users(Request $request) {

        $page = 'Пользователи';
        $paginate = $this->paginate;
        $users = User::with('payments')->where('id', '!=', 4); // список пользователей без профиля гостя

        $search = '';
        if($request->search) { // сортировка по входным данным
            $search = $request->search; // поиск по имени, фамилии или идентификатору социальной сети
            $users->where('name', 'LIKE', '%'. $request->search .'%')->orWhere('last_name', 'LIKE', '%'. $request->search .'%')
                ->orWhere('vkontakte_id', 'LIKE', '%'. $request->search .'%')->orWhere('facebook_id', 'LIKE', '%'. $request->search .'%');
        }

        $sort = json_decode($request->sort);
        if($request->sort) { // сортировка по полям
            $json = json_decode($request->sort);
            $json = array_reverse($json);
            foreach ($json as $j) {
                $users->orderBy($j->column, $j->order);
            }
        }

        $arraySort = [
            'sort' => $request->sort,
            'search' => $search
        ];

        $users = $users->paginate($paginate); // пагинация

        return view('admin.users', compact('users', 'paginate', 'search', 'page', 'sort', 'arraySort'));
    }

    // Страница отвечающая за вывод списка пополнений пользователей
    public function wallet(Request $request) {

        $page = 'Пополнение';
        $paginate = 20;
        $payments = Payment::where('payment_type_id', 1);

        if($request->calendar_range) {
            if(strpos($request->calendar_range, '—') !== false) {
                $explode = explode('—', $request->calendar_range);
                $dateFrom = Carbon::parse(trim(implode('-', array_reverse(explode('.', $explode[0])))));
                $dateTo = Carbon::parse(trim(implode('-', array_reverse(explode('.', $explode[1])))));
                $payments = $payments->where('created_at', '>', $dateFrom)->where('created_at', '<', $dateTo);
            }
            else {
                $date = implode('-', array_reverse(explode('.', $request->calendar_range)));
                $dateFrom = Carbon::parse($date);
                $dateTo = Carbon::parse($date)->addDay();
                $payments = $payments->where('created_at', '>', $dateFrom)->where('created_at', '<', $dateTo);
            }
        }


        if($request->search) {
            $search = $request->search;
            $payments->whereHas('account', function ($query) use($search) {
                $query->where(function ($query) use($search) {
                    $query->where('name', 'LIKE', '%'. $search .'%')->orWhere('last_name', 'LIKE', '%'. $search .'%');
                });
            });
        }

        $sort = json_decode($request->sort);
        if($request->sort) {
            $json = json_decode($request->sort);
            foreach ($json as $j) {
                $payments = $payments->orderBy($j->column, $j->order);
            }
        }

        $payments = $payments->paginate($paginate);

        $arraySort = [
            'sort' => $request->sort
        ];

        return view('admin.wallet', compact('payments', 'paginate', 'page', 'sort', 'arraySort'));
    }

    // Метод отвечающий за страницу заявок на вывод денег из сервиса
    public function output(Request $request) {
        $page = 'Вывод';

        $paginate = 20;
        $search = false;
        $applications = new WithdrawMoneyAccountApplication;

        if($request->calendar_range) { // сортировка по дате
            if(strpos($request->calendar_range, '—') !== false) {
                $explode = explode('—', $request->calendar_range);
                $dateFrom = Carbon::parse(trim(implode('-', array_reverse(explode('.', $explode[0])))));
                $dateTo = Carbon::parse(trim(implode('-', array_reverse(explode('.', $explode[1])))));
                $applications = $applications->where('created_at', '>', $dateFrom)->where('created_at', '<', $dateTo);
            }
            else {
                $date = implode('-', array_reverse(explode('.', $request->calendar_range)));
                $dateFrom = Carbon::parse($date);
                $dateTo = Carbon::parse($date)->addDay();
                $applications = $applications->where('created_at', '>', $dateFrom)->where('created_at', '<', $dateTo);
            }
        }


        if($request->search) { // сортировка по вхождению
            $search = $request->search;
            $applications->whereHas('account', function ($query) use($search) {
                $query->where(function ($query) use($search) {
                    $query->where('name', 'LIKE', '%'. $search .'%')->orWhere('last_name', 'LIKE', '%'. $search .'%');
                });
            });
        }


        $sort = json_decode($request->sort); // сортировка по полям
        if($request->sort) {
            $json = json_decode($request->sort);
            foreach ($json as $j) {
                $applications = $applications->orderBy($j->column, $j->order);
            }
        }

        $applications = $applications->paginate($paginate);


        return view('admin.output', compact('page', 'paginate', 'applications', 'search', 'sort'));
    }

    // Страница отвечающая за вывод списка промокодов
    public function promocodes(Request $request) {

        $page = 'Промокоды';
        if($request->isMethod('post')) { // создание промокодов
            $data = $request->all();
            if(isset($data['promocode-value']) && isset($data['promocode-sum'])) {

                for($i=0; $i < $data['promocode-value']; $i++) {
                    $promocode = str_random(10); //имя промокода
                    $isPromocode = Promocode::where('code', $promocode)->first(); // проверка на существование такого промокода в базе
                    if($isPromocode) {
                        $data['promocode-value'] = $data['promocode-value'] + 1;
                    }
                    else {
                        $newPromocode = new Promocode; // создание промокода
                        $newPromocode->code = $promocode;
                        $newPromocode->price = $data['promocode-sum'];
                        $newPromocode->save();
                    }

                }
            }
        }

        $paginate = 20;
        $promocodes = new Promocode();

        if($request->search) {
            $promocodes->where('code', 'LIKE', '%'. $request->search .'%'); // поиск промокодов
        }

        $sort = json_decode($request->sort);
        if($request->sort) { // сортировка по полям
            $json = json_decode($request->sort);
            foreach ($json as $j) {
                $promocodes = $promocodes->orderBy($j->column, $j->order);
            }
        }

        $arraySort = [
            'sort' => $request->sort
        ];

        $promocodes = $promocodes->where('accrual', 0)->paginate($paginate);

        return view('admin.promo', compact('promocodes', 'paginate', 'page', 'sort', 'arraySort'));
    }

    // Страница отвечающая за вывод игр и информации по играм
    public function games() {
        $page = 'Игры';

        $jackpotGames = HistoryGame::with(['participants' => function($query) {
            $query->with('account');
        }, 'type', 'winner'])
            ->orderBy('id', 'asc')
            ->where('game_id', 3)
            ->limit(100)
            ->get(); // вывод игр по игре jackpot

        $coinflipGames = HistoryGame::with(['participants' => function($query) {
            $query->with('account');
        }, 'winner'])
            ->orderBy('id', 'asc') // сортировка по id
            ->where('game_id', 4) // тип игры
            ->has('participants', 1)
            ->limit(50) // количество
            ->get(); // вывод игр по игре coinflip

        return view('admin.games', compact('page', 'jackpotGames', 'coinflipGames'));
    }

    // Метод возвращающий информацию по определенному пользователю
    public function getInfoUser(Request $request) {

        $user = User::findOrFail($request->userId);

        $view = view('admin.blocks.popup-get-info-user', compact('user'))->render();

        return $view;
    }

    // Метод возвращает информацию по заявке на вывод
    public function getInfoUserOutput(Request $request) {
        $user = User::findOrFail($request->userId);
        $application = WithdrawMoneyAccountApplication::findOrFail($request->applicationId);

        $view = view('admin.blocks.output-info-user', compact('user', 'application'))->render();


        return $view;
    }

    // Метод выводит пагинацию по оплатам для определенного пользователя
    public function usersNextPage(Request $request) {


        $user = User::findOrFail($request->userId);
        $payments = Payment::where('account_id', $request->userId)->where('is_admin', 0)->whereIn('payment_type_id', [1,2,3])->paginate(10);
        $view = view('admin.blocks.paginate-user', compact('payments', 'user'))->render();

        return $view;

    }

    // Метод сохраняет информацию по пользователю из попапа
    public function saveInfoUser(Request $request) {

        $data = $request->all();

        $user = User::findOrFail($data['id']);
        $user->name = $data['name'];
        $user->last_name = $data['last_name'];
        $user->role_id = $data['role_id'];
        $user->is_referral_power = $data['is_referral_power'];
        $user->is_blocked = $data['is_blocked'];

        if($request->balance > 0) {

            $currentBalance = getBalance($user) / 10;
            $difference = $currentBalance;
            if($request->balance > $currentBalance) {
                $difference = $request->balance - $currentBalance;
            }

            if($request->balance < $currentBalance) {
                $difference = -($currentBalance - $request->balance);
            }

            $payment = new Payment;
            $payment->account_id = $user->id;
            $payment->price = $difference;
            $payment->payment_system_id = 1;
            $payment->payment_type_id = 1;
            $payment->is_admin = 1;
            $payment->save();


            if($user->referral_account_id) {
                $referralAccount = User::find($user->referral_account_id);

                if($referralAccount->is_referral_power) {
                    $lvl = getLevel($referralAccount);
                    $percent = $lvl * 0.1;
                    $referralSum = ($payment->price * $percent) / 100;

                    $payment = new Payment;
                    $payment->account_id = $referralAccount->id;
                    $payment->referral_account_id = $user->id;
                    $payment->price = $referralSum;
                    $payment->payment_type_id = 3;
                    $payment->save();

                }

            }

            $experience = $payment->price * 10 / 2;

            if($user->experience < 80000) {
                $experience = $user->experience + $experience;
            }
            else {
                $experience = 80000;
            }
            $user->experience = $experience;

            if($user->experience >= 80000) {
                $user->experience = 80000;
            }

        }

        $user->save();

    }

    // Ajax сохранение выпадающих списков
    public function saveAjaxInfo(Request $request) {

        $user = User::findOrFail($request->id);
        $user->role_id = $request->role;
        if($request->ref == 1) {
            $user->is_referral_power = $request->ref; // поле отвечающее за реферальное награждение
        }
        else {
            $user->is_referral_power = 0;
        }

        if($request->blocked == 1) {
            $user->is_blocked = $request->blocked;
        }
        else {
            $user->is_blocked = 0;
        }


        $user->save();
    }

    // метод сохраняет информацию о заявке и создает платеж
    public function saveApplicationInfo(Request $request) {
        $application = WithdrawMoneyAccountApplication::findOrFail($request->applicationId);

        if($application->status_id == 2) {
            $application->status_id = $request->status_id;
            $application->save();

            if($request->status_id == 1) {
                $payment = new Payment;
                $payment->account_id = $application->account_id;
                $payment->price = -$application->price;
                $payment->payment_type_id = 2;
                $payment->payment_system_id = $application->payment_system_id;
                $payment->save();
            }

        }

    }


    // Меняет статус для группы заявок
    public function changeStatus(Request $request) {

        foreach ($request->arr as $item) {

            $application = WithdrawMoneyAccountApplication::where('id', $item)->where('status_id', '!=', 4)->first();

            if(!$application) {
                continue;
            }

            $application->status_id = $request->statusId;
            $application->save();

            if($request->statusId == 1) {
                $this->outputPayment($application->id); // вызывает метод оплаты
            }

            if($request->statusId = 3) {
                $payment = Payment::find($application->payment_id);
                $payment->delete();
            }


        }

    }

    // Метод отвечающий за вывод денег из сервиса
    public function outputPayment($applicationId) {

        $application = WithdrawMoneyAccountApplication::where('id', $applicationId)->where('status_id', '!=', 4)->first(); // находит заявку

        if($application->payment_system_id == 1) { // проверяет тип платежки и дает определенный код
            $codeCurrency = 63;
        }

        if($application->payment_system_id == 2) {
            $codeCurrency = 80;
        }

        if($application->payment_system_id == 3) {
            $codeCurrency = 45;
        }

        if($application->payment_system_id == 4) {
            $codeCurrency = 94;
        }


        $data = array( // реализация вывода денег через freekassa
            'wallet_id'=>'F105511048',
            'purse'=> $application->phone,
            'amount'=> $application->price,
            'desc'=>'Cashout',
            'currency'=>$codeCurrency,
            'sign'=>md5('F105511048'.$codeCurrency.$application->price.$application->phone.'03D62C57AC7642900F3D3DCA5BC1C099'),
            'action'=>'cashout',
        );

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, 'https://www.fkwallet.ru/api_v1.php');
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        $result = trim(curl_exec($ch));
        $c_errors = curl_error($ch);
        curl_close($ch);
        if($result['status'] != 'error') { // проверка статус оплаты
            $payment = new Payment;
            $payment->account_id = $application->account_id;
            $payment->price = -$application->price;
            $payment->payment_type_id = 2;
            $payment->save();

            $application->status_id = 4;
            $application->save();
        }

    }

}
